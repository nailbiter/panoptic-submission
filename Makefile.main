VAL_INPUT_JSON_FILE=./coco/annotations/panoptic_val2017.json
TRAIN_INPUT_JSON_FILE=./coco/annotations/panoptic_train2017.json

#train parameters
CROP_SIZE=32

DIRS=\
	train\
	train_labels\
	val\
	val_labels\
	test\
	test_labels

#phony targets
test: coco/flags/predict.txt coco/flags/resize.txt
	#mkdir -p coco/test_out
	#./$(PERLDIR)/test.pl --python $(PYTHON) \
		--start 37\
		--outdir coco/test_out\
		--extension jpg\
		--testfolder coco/val 2>log/test.log.txt
	#$(PYTHON) test.py\
		--dataset coco\
		--checkpoint_path \
			checkpoints/latest_model_FC-DenseNet56_coco.ckpt\
		--crop_height $(CROP_SIZE)\
		--crop_width $(CROP_SIZE)\
		2>log/test.log.txt
coco/flags/resize.txt: $(PERLDIR)/imageconverter.pl
	./$(PERLDIR)/imageconverter.pl --from coco/test_out --to coco/test_resized \
		--mode RESIZE --refdir coco/val_labels
	#touch $@
coco/flags/predict.txt:coco/test.txt coco/predict_list.txt
	$(PYTHON) predict.py \
		--checkpoint_path \
			checkpoints/latest_model_FC-DenseNet56_coco.ckpt\
		--dataset coco\
		--outdir coco/test_out\
		--image coco/predict_list.txt 2>log/predict.log.txt
	touch $@
coco/predict_list.txt: coco/val.txt
	find coco/val|grep jpg > $@
train: $(CLASS_DICT) train_params.val.json train_params.train.json coco/train.txt coco/train_labels.txt #$(addsuffix /.gitignore,$(addprefix coco/,$(DIRS))) 
	$(PYTHON) train.py\
		--num_epochs 1\
		--crop_height $(CROP_SIZE)\
		--crop_width  $(CROP_SIZE)\
		--dataset coco 2>&1 | tee log/train.log.txt
train_params.train.json: pl/get_image_size.pl #$(addsuffix /.gitignore,$(addprefix coco/,$(DIRS)))
	./$< coco/jpgs/train > $@ 2> log/train_params.log.txt
train_params.val.json: pl/get_image_size.pl #$(addsuffix /.gitignore,$(addprefix coco/,$(DIRS)))
	./$< coco/jpgs/val > $@ 2> log/train_params.log.txt
coco/val_labels/.gitignore: $(VAL_INPUT_JSON_FILE)
	mkdir -p $(dir $@)
	$(PYTHON2) $(PANOPTIC2SEMANTIC_SEGMENTATION)\
		--input_json_file $<\
	  	--semantic_seg_folder $(dir $@)\
		--categories_json_file $(CATEGORIES_JSON_FILE)\
		2>log/$(notdir $(basename $(SEMANTIC_SEGMENTATION_JSON))).log.txt
	echo '*.png' > $@
coco/test_labels/.gitignore:
	mkdir -p $(dir $@)
	touch $@
coco/train.txt: coco/train_full/.gitignore $(PERLDIR)/slicer.pl
	rm -rf coco/train coco/train_labels
	./$(PERLDIR)/slicer.pl --from coco/train_full --to coco/train --ext jpg \
		--from coco/train_labels_full --to coco/train_labels --ext png \
		--slicenum 9\
		--testflag 0
	touch $@
coco/train_labels.txt: coco/train_labels_full/.gitignore
	touch $@
coco/train_labels_full/.gitignore: $(TRAIN_INPUT_JSON_FILE)
	mkdir -p $(dir $@)
	$(PYTHON2) $(PANOPTIC2SEMANTIC_SEGMENTATION)\
		--input_json_file $<\
	  	--semantic_seg_folder $(dir $@)\
		--categories_json_file $(CATEGORIES_JSON_FILE)\
		2>log/$(notdir $(basename $(SEMANTIC_SEGMENTATION_JSON))).log.txt
	echo '*.png' > $@
#~/anaconda3/bin/python predict.py --image coco/val/000000000285.jpg --checkpoint_path checkpoints/latest_model_FC-DenseNet56_coco.ckpt --model FC-DenseNet56  --dataset coco
