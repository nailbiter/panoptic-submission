VAL_INPUT_JSON_FILE=./coco/annotations/panoptic_val2017.json
TRAIN_INPUT_JSON_FILE=./coco/annotations/panoptic_train2017.json

#train parameters
CROP_SIZE=32

DIRS=\
	train\
	train_labels\
	val\
	val_labels\
	test\
	test_labels
test2: $(CLASS_DICT) train_params.val.json train_params.train.json #$(addsuffix /.gitignore,$(addprefix coco/,$(DIRS))) 
	$(PYTHON) train.py\
		--num_epochs 1\
		--crop_height $(CROP_SIZE)\
		--crop_width  $(CROP_SIZE)\
		--dataset coco 2>&1 | tee log/train.log.txt
train_params.train.json: pl/get_image_size.pl #$(addsuffix /.gitignore,$(addprefix coco/,$(DIRS)))
	./$< coco/jpgs/train > $@ 2> log/train_params.log.txt
train_params.val.json: pl/get_image_size.pl #$(addsuffix /.gitignore,$(addprefix coco/,$(DIRS)))
	./$< coco/jpgs/val > $@ 2> log/train_params.log.txt
coco/train_labels/.gitignore: $(TRAIN_INPUT_JSON_FILE)
	mkdir -p $(dir $@)
	$(PYTHON2) $(PANOPTIC2SEMANTIC_SEGMENTATION)\
		--input_json_file $<\
	  	--semantic_seg_folder $(dir $@)\
		--categories_json_file $(CATEGORIES_JSON_FILE)\
		2>log/$(notdir $(basename $(SEMANTIC_SEGMENTATION_JSON))).log.txt
	echo '*.png' > $@
coco/val_labels/.gitignore: $(VAL_INPUT_JSON_FILE)
	mkdir -p $(dir $@)
	$(PYTHON2) $(PANOPTIC2SEMANTIC_SEGMENTATION)\
		--input_json_file $<\
	  	--semantic_seg_folder $(dir $@)\
		--categories_json_file $(CATEGORIES_JSON_FILE)\
		2>log/$(notdir $(basename $(SEMANTIC_SEGMENTATION_JSON))).log.txt
	echo '*.png' > $@
coco/test_labels/.gitignore:
	mkdir -p $(dir $@)
	touch $@
coco/test/.gitignore: coco/jpgs/test/.gitignore
	mkdir -p $(dir $@)
	time ./pl/imageconverter.pl --from $(dir $<) --to $(dir $@) --mode JPGTOPNG
	echo '*.png' > $@
coco/val/.gitignore: coco/jpgs/val/.gitignore pl/imageconverter.pl
	mkdir -p $(dir $@)
	time ./pl/imageconverter.pl --from $(dir $<) --to $(dir $@) --mode JPGTOPNG
	echo '*.png' > $@
coco/train/.gitignore: coco/jpgs/train/.gitignore
	mkdir -p $(dir $@)
	time ./pl/imageconverter.pl --from $(dir $<) --to $(dir $@) --mode JPGTOPNG
	#echo '*.png' > $@
